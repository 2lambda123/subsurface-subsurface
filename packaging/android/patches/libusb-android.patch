diff --git a/libusb/libusb.h b/libusb/libusb.h
index 8a6b0bfa9f37..506cf95ef4e5 100644
--- a/libusb/libusb.h
+++ b/libusb/libusb.h
@@ -2059,6 +2059,19 @@ enum libusb_option {
 
 int LIBUSB_CALL libusb_set_option(libusb_context *ctx, enum libusb_option option, ...);
 
+#ifdef __ANDROID__
+typedef int (*libusb_android_open_callback_func)(uint16_t idVendor, uint16_t idProduct);
+typedef int (*libusb_android_scan_devices_func)(struct libusb_context *ctx);
+/* Make the darn thing ifdef'able */
+#define libusb_android_open_callback_func libusb_android_open_callback_func
+
+void libusb_set_android_open_callback(libusb_android_open_callback_func aocf);
+void libusb_set_android_scan_devices_callback(libusb_android_scan_devices_func asdf);
+void android_enumerate_device(struct libusb_context *ctx, uint8_t busnum, uint8_t portnum,
+		uint8_t devaddr, uint8_t numconf, struct libusb_device_descriptor dd);
+
+#endif
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libusb/os/linux_usbfs.c b/libusb/os/linux_usbfs.c
index 63fe592720d4..68afa072d98a 100644
--- a/libusb/os/linux_usbfs.c
+++ b/libusb/os/linux_usbfs.c
@@ -210,6 +210,20 @@ static int _open(const char *path, int flags)
 		return open(path, flags);
 }
 
+#ifdef __ANDROID__
+static libusb_android_open_callback_func _android_open_callback = NULL;
+
+void libusb_set_android_open_callback(libusb_android_open_callback_func aocf) {
+	_android_open_callback = aocf;
+}
+
+static libusb_android_scan_devices_func _android_scan_devices_callback = NULL;
+
+void libusb_set_android_scan_devices_callback(libusb_android_scan_devices_func asdf) {
+	_android_scan_devices_callback = asdf;
+}
+#endif
+
 static int _get_usbfs_fd(struct libusb_device *dev, mode_t mode, int silent)
 {
 	struct libusb_context *ctx = DEVICE_CTX(dev);
@@ -217,14 +231,26 @@ static int _get_usbfs_fd(struct libusb_device *dev, mode_t mode, int silent)
 	int fd;
 	int delay = 10000;
 
+#ifndef __ANDROID__
 	if (usbdev_names)
 		snprintf(path, PATH_MAX, "%s/usbdev%d.%d",
 			usbfs_path, dev->bus_number, dev->device_address);
 	else
 		snprintf(path, PATH_MAX, "%s/%03d/%03d",
 			usbfs_path, dev->bus_number, dev->device_address);
+#endif
 
+#ifdef __ANDROID__
+	if (_android_open_callback) {
+		fd = _android_open_callback(dev->device_descriptor.idVendor, dev->device_descriptor.idProduct);
+		usbi_info(ctx, "got fd %d when opening usb device", fd);
+	} else {
+		usbi_err(ctx, "_android_open_callback not set");
+		return LIBUSB_ERROR_OTHER;
+	}
+#else
 	fd = _open(path, mode);
+#endif
 	if (fd != -1)
 		return fd; /* Success */
 
@@ -430,11 +456,13 @@ static int op_init(struct libusb_context *ctx)
 	struct stat statbuf;
 	int r;
 
+#ifndef __ANDROID__
 	usbfs_path = find_usbfs_path();
 	if (!usbfs_path) {
 		usbi_err(ctx, "could not find usbfs");
 		return LIBUSB_ERROR_OTHER;
 	}
+#endif
 
 	if (monotonic_clkid == -1)
 		monotonic_clkid = find_monotonic_clock();
@@ -562,6 +590,14 @@ static int linux_scan_devices(struct libusb_context *ctx)
 	ret = linux_udev_scan_devices(ctx);
 #elif !defined(__ANDROID__)
 	ret = linux_default_scan_devices(ctx);
+#elif __ANDROID__
+	if (_android_scan_devices_callback) {
+		ret = _android_scan_devices_callback(ctx);
+		usbi_info(ctx, "back from scanning for devices on Android");
+	} else {
+		usbi_err(ctx, "_android_open_callback not set");
+		return LIBUSB_ERROR_OTHER;
+	}
 #endif
 
 	usbi_mutex_static_unlock(&linux_hotplug_lock);
@@ -1149,6 +1185,25 @@ retry:
 	return LIBUSB_SUCCESS;
 }
 
+#if defined(__ANDROID__)
+void android_enumerate_device(struct libusb_context *ctx, uint8_t busnum, uint8_t portnum,
+		uint8_t devaddr, uint8_t numconf, struct libusb_device_descriptor dd)
+{
+	usbi_info(ctx, "libusb adding device bus %d / port %d", busnum, portnum);
+        unsigned long session_id = busnum << 8 | portnum;
+	struct libusb_device *dev;
+	dev = usbi_alloc_device(ctx, session_id);
+	if (dev == NULL)
+		return;
+	dev->bus_number = busnum;
+	dev->port_number = portnum;
+	dev->device_address = devaddr;
+	dev->num_configurations = numconf;
+	dev->device_descriptor = dd;
+	usbi_connect_device(dev);
+}
+#endif
+
 int linux_enumerate_device(struct libusb_context *ctx,
 	uint8_t busnum, uint8_t devaddr, const char *sysfs_dir)
 {
